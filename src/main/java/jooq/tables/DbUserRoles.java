/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.util.Arrays;
import java.util.List;

import jooq.DbPublic;
import jooq.Keys;
import jooq.tables.records.DbUserRolesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DbUserRoles extends TableImpl<DbUserRolesRecord> {

    private static final long serialVersionUID = 918566685;

    /**
     * The reference instance of <code>public.user_roles</code>
     */
    public static final DbUserRoles USER_ROLES = new DbUserRoles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DbUserRolesRecord> getRecordType() {
        return DbUserRolesRecord.class;
    }

    /**
     * The column <code>public.user_roles.username</code>.
     */
    public final TableField<DbUserRolesRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.user_roles.role</code>.
     */
    public final TableField<DbUserRolesRecord, String> ROLE = createField(DSL.name("role"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>public.user_roles</code> table reference
     */
    public DbUserRoles() {
        this(DSL.name("user_roles"), null);
    }

    /**
     * Create an aliased <code>public.user_roles</code> table reference
     */
    public DbUserRoles(String alias) {
        this(DSL.name(alias), USER_ROLES);
    }

    /**
     * Create an aliased <code>public.user_roles</code> table reference
     */
    public DbUserRoles(Name alias) {
        this(alias, USER_ROLES);
    }

    private DbUserRoles(Name alias, Table<DbUserRolesRecord> aliased) {
        this(alias, aliased, null);
    }

    private DbUserRoles(Name alias, Table<DbUserRolesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> DbUserRoles(Table<O> child, ForeignKey<O, DbUserRolesRecord> key) {
        super(child, key, USER_ROLES);
    }

    @Override
    public Schema getSchema() {
        return DbPublic.PUBLIC;
    }

    @Override
    public UniqueKey<DbUserRolesRecord> getPrimaryKey() {
        return Keys.PK_USER_ROLES;
    }

    @Override
    public List<UniqueKey<DbUserRolesRecord>> getKeys() {
        return Arrays.<UniqueKey<DbUserRolesRecord>>asList(Keys.PK_USER_ROLES);
    }

    @Override
    public List<ForeignKey<DbUserRolesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DbUserRolesRecord, ?>>asList(Keys.USER_ROLES__FK_USERNAME, Keys.USER_ROLES__FK_ROLES);
    }

    public DbBlogUser blogUser() {
        return new DbBlogUser(this, Keys.USER_ROLES__FK_USERNAME);
    }

    public DbRole role() {
        return new DbRole(this, Keys.USER_ROLES__FK_ROLES);
    }

    @Override
    public DbUserRoles as(String alias) {
        return new DbUserRoles(DSL.name(alias), this);
    }

    @Override
    public DbUserRoles as(Name alias) {
        return new DbUserRoles(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DbUserRoles rename(String name) {
        return new DbUserRoles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DbUserRoles rename(Name name) {
        return new DbUserRoles(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
