/*
 * This file is generated by jOOQ.
 */
package jooq.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.util.Collection;

import jooq.tables.DbUser;
import jooq.tables.records.DbUserRecord;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DbUserDao extends AbstractReactiveVertxDAO<DbUserRecord, jooq.tables.pojos.DbUser, String, Future<List<jooq.tables.pojos.DbUser>>, Future<jooq.tables.pojos.DbUser>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<DbUserRecord,jooq.tables.pojos.DbUser,String> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public DbUserDao(Configuration configuration, io.vertx.sqlclient.SqlClient delegate) {
        super(DbUser.DB_USER, jooq.tables.pojos.DbUser.class, new ReactiveClassicQueryExecutor<DbUserRecord,jooq.tables.pojos.DbUser,String>(configuration,delegate,jooq.tables.mappers.RowMappers.getDbUserMapper()));
    }

    @Override
    protected String getId(jooq.tables.pojos.DbUser object) {
        return object.getUsername();
    }

    /**
     * Find records that have <code>password IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.DbUser>> findManyByPassword(Collection<String> values) {
        return findManyByCondition(DbUser.DB_USER.PASSWORD.in(values));
    }

    /**
     * Find records that have <code>password IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<jooq.tables.pojos.DbUser>> findManyByPassword(Collection<String> values, int limit) {
        return findManyByCondition(DbUser.DB_USER.PASSWORD.in(values),limit);
    }

    /**
     * Find records that have <code>password_salt IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.DbUser>> findManyByPasswordSalt(Collection<String> values) {
        return findManyByCondition(DbUser.DB_USER.PASSWORD_SALT.in(values));
    }

    /**
     * Find records that have <code>password_salt IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<jooq.tables.pojos.DbUser>> findManyByPasswordSalt(Collection<String> values, int limit) {
        return findManyByCondition(DbUser.DB_USER.PASSWORD_SALT.in(values),limit);
    }

    /**
     * Find records that have <code>version IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.DbUser>> findManyByVersion(Collection<Integer> values) {
        return findManyByCondition(DbUser.DB_USER.VERSION.in(values));
    }

    /**
     * Find records that have <code>version IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<jooq.tables.pojos.DbUser>> findManyByVersion(Collection<Integer> values, int limit) {
        return findManyByCondition(DbUser.DB_USER.VERSION.in(values),limit);
    }

    @Override
    public ReactiveClassicQueryExecutor<DbUserRecord,jooq.tables.pojos.DbUser,String> queryExecutor(){
        return (ReactiveClassicQueryExecutor<DbUserRecord,jooq.tables.pojos.DbUser,String>) super.queryExecutor();
    }
}
