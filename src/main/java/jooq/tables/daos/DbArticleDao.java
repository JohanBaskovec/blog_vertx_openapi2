/*
 * This file is generated by jOOQ.
 */
package jooq.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.util.Collection;

import jooq.tables.DbArticle;
import jooq.tables.records.DbArticleRecord;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DbArticleDao extends AbstractReactiveVertxDAO<DbArticleRecord, jooq.tables.pojos.DbArticle, String, Future<List<jooq.tables.pojos.DbArticle>>, Future<jooq.tables.pojos.DbArticle>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<DbArticleRecord,jooq.tables.pojos.DbArticle,String> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public DbArticleDao(Configuration configuration, io.vertx.sqlclient.SqlClient delegate) {
        super(DbArticle.ARTICLE, jooq.tables.pojos.DbArticle.class, new ReactiveClassicQueryExecutor<DbArticleRecord,jooq.tables.pojos.DbArticle,String>(configuration,delegate,jooq.tables.mappers.RowMappers.getDbArticleMapper()));
    }

    @Override
    protected String getId(jooq.tables.pojos.DbArticle object) {
        return object.getId();
    }

    /**
     * Find records that have <code>title IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.DbArticle>> findManyByDbTitle(Collection<String> values) {
        return findManyByCondition(DbArticle.ARTICLE.TITLE.in(values));
    }

    /**
     * Find records that have <code>title IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<jooq.tables.pojos.DbArticle>> findManyByDbTitle(Collection<String> values, int limit) {
        return findManyByCondition(DbArticle.ARTICLE.TITLE.in(values),limit);
    }

    /**
     * Find records that have <code>content IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.DbArticle>> findManyByDbContent(Collection<String> values) {
        return findManyByCondition(DbArticle.ARTICLE.CONTENT.in(values));
    }

    /**
     * Find records that have <code>content IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<jooq.tables.pojos.DbArticle>> findManyByDbContent(Collection<String> values, int limit) {
        return findManyByCondition(DbArticle.ARTICLE.CONTENT.in(values),limit);
    }

    /**
     * Find records that have <code>author_id IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.DbArticle>> findManyByDbAuthorId(Collection<String> values) {
        return findManyByCondition(DbArticle.ARTICLE.AUTHOR_ID.in(values));
    }

    /**
     * Find records that have <code>author_id IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<jooq.tables.pojos.DbArticle>> findManyByDbAuthorId(Collection<String> values, int limit) {
        return findManyByCondition(DbArticle.ARTICLE.AUTHOR_ID.in(values),limit);
    }

    /**
     * Find records that have <code>version IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.DbArticle>> findManyByDbVersion(Collection<Integer> values) {
        return findManyByCondition(DbArticle.ARTICLE.VERSION.in(values));
    }

    /**
     * Find records that have <code>version IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<jooq.tables.pojos.DbArticle>> findManyByDbVersion(Collection<Integer> values, int limit) {
        return findManyByCondition(DbArticle.ARTICLE.VERSION.in(values),limit);
    }

    @Override
    public ReactiveClassicQueryExecutor<DbArticleRecord,jooq.tables.pojos.DbArticle,String> queryExecutor(){
        return (ReactiveClassicQueryExecutor<DbArticleRecord,jooq.tables.pojos.DbArticle,String>) super.queryExecutor();
    }
}
