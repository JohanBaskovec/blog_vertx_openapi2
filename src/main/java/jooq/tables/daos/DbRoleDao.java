/*
 * This file is generated by jOOQ.
 */
package jooq.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.time.OffsetDateTime;
import java.util.Collection;

import jooq.tables.DbRole;
import jooq.tables.records.DbRoleRecord;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DbRoleDao extends AbstractReactiveVertxDAO<DbRoleRecord, jooq.tables.pojos.DbRole, String, Future<List<jooq.tables.pojos.DbRole>>, Future<jooq.tables.pojos.DbRole>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<DbRoleRecord,jooq.tables.pojos.DbRole,String> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public DbRoleDao(Configuration configuration, io.vertx.sqlclient.SqlClient delegate) {
        super(DbRole.ROLE, jooq.tables.pojos.DbRole.class, new ReactiveClassicQueryExecutor<DbRoleRecord,jooq.tables.pojos.DbRole,String>(configuration,delegate,jooq.tables.mappers.RowMappers.getDbRoleMapper()));
    }

    @Override
    protected String getId(jooq.tables.pojos.DbRole object) {
        return object.getId();
    }

    /**
     * Find records that have <code>last_modification_time IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.DbRole>> findManyByDbLastModificationTime(Collection<OffsetDateTime> values) {
        return findManyByCondition(DbRole.ROLE.LAST_MODIFICATION_TIME.in(values));
    }

    /**
     * Find records that have <code>last_modification_time IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<jooq.tables.pojos.DbRole>> findManyByDbLastModificationTime(Collection<OffsetDateTime> values, int limit) {
        return findManyByCondition(DbRole.ROLE.LAST_MODIFICATION_TIME.in(values),limit);
    }

    /**
     * Find records that have <code>creation_time IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.DbRole>> findManyByDbCreationTime(Collection<OffsetDateTime> values) {
        return findManyByCondition(DbRole.ROLE.CREATION_TIME.in(values));
    }

    /**
     * Find records that have <code>creation_time IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<jooq.tables.pojos.DbRole>> findManyByDbCreationTime(Collection<OffsetDateTime> values, int limit) {
        return findManyByCondition(DbRole.ROLE.CREATION_TIME.in(values),limit);
    }

    @Override
    public ReactiveClassicQueryExecutor<DbRoleRecord,jooq.tables.pojos.DbRole,String> queryExecutor(){
        return (ReactiveClassicQueryExecutor<DbRoleRecord,jooq.tables.pojos.DbRole,String>) super.queryExecutor();
    }
}
