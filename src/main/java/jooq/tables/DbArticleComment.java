/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import jooq.DbPublic;
import jooq.Indexes;
import jooq.Keys;
import jooq.tables.records.DbArticleCommentRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DbArticleComment extends TableImpl<DbArticleCommentRecord> {

    private static final long serialVersionUID = 1379361570;

    /**
     * The reference instance of <code>public.article_comment</code>
     */
    public static final DbArticleComment ARTICLE_COMMENT = new DbArticleComment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DbArticleCommentRecord> getRecordType() {
        return DbArticleCommentRecord.class;
    }

    /**
     * The column <code>public.article_comment.id</code>.
     */
    public final TableField<DbArticleCommentRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.article_comment.content</code>.
     */
    public final TableField<DbArticleCommentRecord, String> CONTENT = createField(DSL.name("content"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.article_comment.author_id</code>.
     */
    public final TableField<DbArticleCommentRecord, String> AUTHOR_ID = createField(DSL.name("author_id"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.article_comment.version</code>.
     */
    public final TableField<DbArticleCommentRecord, Integer> VERSION = createField(DSL.name("version"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.article_comment.creation_time</code>.
     */
    public final TableField<DbArticleCommentRecord, OffsetDateTime> CREATION_TIME = createField(DSL.name("creation_time"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.article_comment.last_modification_time</code>.
     */
    public final TableField<DbArticleCommentRecord, OffsetDateTime> LAST_MODIFICATION_TIME = createField(DSL.name("last_modification_time"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * The column <code>public.article_comment.article_id</code>.
     */
    public final TableField<DbArticleCommentRecord, String> ARTICLE_ID = createField(DSL.name("article_id"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * Create a <code>public.article_comment</code> table reference
     */
    public DbArticleComment() {
        this(DSL.name("article_comment"), null);
    }

    /**
     * Create an aliased <code>public.article_comment</code> table reference
     */
    public DbArticleComment(String alias) {
        this(DSL.name(alias), ARTICLE_COMMENT);
    }

    /**
     * Create an aliased <code>public.article_comment</code> table reference
     */
    public DbArticleComment(Name alias) {
        this(alias, ARTICLE_COMMENT);
    }

    private DbArticleComment(Name alias, Table<DbArticleCommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private DbArticleComment(Name alias, Table<DbArticleCommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> DbArticleComment(Table<O> child, ForeignKey<O, DbArticleCommentRecord> key) {
        super(child, key, ARTICLE_COMMENT);
    }

    @Override
    public Schema getSchema() {
        return DbPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ARTICLE_COMMENT_ID_UINDEX);
    }

    @Override
    public UniqueKey<DbArticleCommentRecord> getPrimaryKey() {
        return Keys.ARTICLE_COMMENT_PK;
    }

    @Override
    public List<UniqueKey<DbArticleCommentRecord>> getKeys() {
        return Arrays.<UniqueKey<DbArticleCommentRecord>>asList(Keys.ARTICLE_COMMENT_PK);
    }

    @Override
    public List<ForeignKey<DbArticleCommentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DbArticleCommentRecord, ?>>asList(Keys.ARTICLE_COMMENT__ARTICLE_COMMENT_USER_USERNAME_FK, Keys.ARTICLE_COMMENT__ARTICLE_COMMENT_ARTICLE_ID_FK);
    }

    public DbBlogUser blogUser() {
        return new DbBlogUser(this, Keys.ARTICLE_COMMENT__ARTICLE_COMMENT_USER_USERNAME_FK);
    }

    public DbArticle article() {
        return new DbArticle(this, Keys.ARTICLE_COMMENT__ARTICLE_COMMENT_ARTICLE_ID_FK);
    }

    @Override
    public DbArticleComment as(String alias) {
        return new DbArticleComment(DSL.name(alias), this);
    }

    @Override
    public DbArticleComment as(Name alias) {
        return new DbArticleComment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DbArticleComment rename(String name) {
        return new DbArticleComment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DbArticleComment rename(Name name) {
        return new DbArticleComment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, Integer, OffsetDateTime, OffsetDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
