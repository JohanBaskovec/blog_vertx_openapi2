/*
 * This file is generated by jOOQ.
 */
package jooq.tables.records;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import jooq.tables.DbUser;
import jooq.tables.interfaces.IDbUser;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DbUserRecord extends UpdatableRecordImpl<DbUserRecord> implements VertxPojo, Record4<String, String, String, Integer>, IDbUser {

    private static final long serialVersionUID = 297803391;

    /**
     * Setter for <code>public.db_user.username</code>.
     */
    @Override
    public DbUserRecord setUsername(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.db_user.username</code>.
     */
    @Override
    public String getUsername() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.db_user.password</code>.
     */
    @Override
    public DbUserRecord setPassword(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.db_user.password</code>.
     */
    @Override
    public String getPassword() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.db_user.password_salt</code>.
     */
    @Override
    public DbUserRecord setPasswordSalt(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.db_user.password_salt</code>.
     */
    @Override
    public String getPasswordSalt() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.db_user.version</code>.
     */
    @Override
    public DbUserRecord setVersion(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.db_user.version</code>.
     */
    @Override
    public Integer getVersion() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, String, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return DbUser.DB_USER.USERNAME;
    }

    @Override
    public Field<String> field2() {
        return DbUser.DB_USER.PASSWORD;
    }

    @Override
    public Field<String> field3() {
        return DbUser.DB_USER.PASSWORD_SALT;
    }

    @Override
    public Field<Integer> field4() {
        return DbUser.DB_USER.VERSION;
    }

    @Override
    public String component1() {
        return getUsername();
    }

    @Override
    public String component2() {
        return getPassword();
    }

    @Override
    public String component3() {
        return getPasswordSalt();
    }

    @Override
    public Integer component4() {
        return getVersion();
    }

    @Override
    public String value1() {
        return getUsername();
    }

    @Override
    public String value2() {
        return getPassword();
    }

    @Override
    public String value3() {
        return getPasswordSalt();
    }

    @Override
    public Integer value4() {
        return getVersion();
    }

    @Override
    public DbUserRecord value1(String value) {
        setUsername(value);
        return this;
    }

    @Override
    public DbUserRecord value2(String value) {
        setPassword(value);
        return this;
    }

    @Override
    public DbUserRecord value3(String value) {
        setPasswordSalt(value);
        return this;
    }

    @Override
    public DbUserRecord value4(Integer value) {
        setVersion(value);
        return this;
    }

    @Override
    public DbUserRecord values(String value1, String value2, String value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IDbUser from) {
        setUsername(from.getUsername());
        setPassword(from.getPassword());
        setPasswordSalt(from.getPasswordSalt());
        setVersion(from.getVersion());
    }

    @Override
    public <E extends IDbUser> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DbUserRecord
     */
    public DbUserRecord() {
        super(DbUser.DB_USER);
    }

    /**
     * Create a detached, initialised DbUserRecord
     */
    public DbUserRecord(String username, String password, String passwordSalt, Integer version) {
        super(DbUser.DB_USER);

        set(0, username);
        set(1, password);
        set(2, passwordSalt);
        set(3, version);
    }

    public DbUserRecord(io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }
}
